'use strict';

var PaymentHistory = require('../models/payment_history');

var controller = {
    createPaymentHistory: (req, res) => {
        const paymentData = req.body;

        if (!paymentData.payment_plan_id || !paymentData.date || !paymentData.payment_name || !paymentData.state || !paymentData.qr_code) {
            return res.status(400).json({
                status: 'error',
                message: 'Por favor, proporciona todos los campos requeridos para crear el historial de pago.'
            });
        }

        const newPaymentHistory = new PaymentHistory({
            payment_plan_id: paymentData.payment_plan_id,
            date: paymentData.date,
            payment_name: paymentData.payment_name,
            state: "active",
            qr_code: paymentData.qr_code
        });

        newPaymentHistory.save((err, paymentHistoryStored) => {
            if (err) {
                return res.status(500).json({
                    status: 'error',
                    message: 'Error al crear el historial de pago'
                });
            }

            return res.status(200).json({
                status: 'success',
                paymentHistory: paymentHistoryStored
            });
        });
    },

    getPaymentHistories: (req, res) => {
        PaymentHistory.find({}, (err, paymentHistories) => {
            if (err) {
                return res.status(500).json({
                    status: 'error',
                    message: 'Error al obtener los historiales de pago'
                });
            }
            if (!paymentHistories || paymentHistories.length === 0) {
                return res.status(404).json({
                    status: 'error',
                    message: 'No hay historiales de pago para mostrar'
                });
            }

            return res.status(200).json({
                status: 'success',
                paymentHistories
            });
        });
    },

    updatePaymentHistory: (req, res) => {
        const paymentHistoryId = req.params.id;
        const newData = req.body;

        PaymentHistory.findByIdAndUpdate(paymentHistoryId, newData, { new: true }, (err, updatedPaymentHistory) => {
            if (err) {
                return res.status(500).json({
                    status: 'error',
                    message: 'Error al actualizar el historial de pago'
                });
            }
            if (!updatedPaymentHistory) {
                return res.status(404).json({
                    status: 'error',
                    message: 'No se encontró el historial de pago a actualizar'
                });
            }

            return res.status(200).json({
                status: 'success',
                paymentHistory: updatedPaymentHistory
            });
        });
    },

    deletePaymentHistory: (req, res) => {
        const paymentHistoryId = req.params.id;

        PaymentHistory.findByIdAndRemove(paymentHistoryId, (err, deletedPaymentHistory) => {
            if (err) {
                return res.status(500).json({
                    status: 'error',
                    message: 'Error al eliminar el historial de pago'
                });
            }
            if (!deletedPaymentHistory) {
                return res.status(404).json({
                    status: 'error',
                    message: 'No se encontró el historial de pago a eliminar'
                });
            }

            return res.status(200).json({
                status: 'success',
                message: 'Historial de pago eliminado exitosamente'
            });
        });
    }
};

module.exports = controller;
